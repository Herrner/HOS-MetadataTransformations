[
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "text",
          "name": "Record - header - setSpec",
          "columnName": "Record - header - setSpec",
          "query": "ddc:",
          "mode": "text",
          "caseSensitive": false,
          "invert": false
        },
        {
          "type": "text",
          "name": "Record - header - setSpec",
          "columnName": "Record - header - setSpec",
          "query": "no",
          "mode": "text",
          "caseSensitive": false,
          "invert": true
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "Record - header - setSpec",
    "expression": "grel:value.replace(\"ddc:\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "subject_ddc",
    "columnInsertIndex": 3,
    "description": "Create column subject_ddc at index 3 based on column Record - header - setSpec using expression grel:value.replace(\"ddc:\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "id",
          "expression": "isBlank(value)",
          "columnName": "id",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": false,
                "l": "false"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "dc:publisher",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "university",
    "columnInsertIndex": 9,
    "description": "Create column university at index 9 based on column dc:publisher using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "id",
          "expression": "isBlank(value)",
          "columnName": "id",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": true,
                "l": "true"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "dc:publisher",
    "expression": "grel:value.split(\".\")[0]",
    "onError": "set-to-blank",
    "newColumnName": "institute",
    "columnInsertIndex": 9,
    "description": "Create column institute at index 9 based on column dc:publisher using expression grel:value.split(\".\")[0]"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:publisher",
    "expression": "grel:cells[\"university\"].value + forNonBlank(row.record.cells[\"institute\"].value[0],v,\", \"+v,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "publisher",
    "columnInsertIndex": 9,
    "description": "Create column publisher at index 9 based on column dc:publisher using expression grel:cells[\"university\"].value + forNonBlank(row.record.cells[\"institute\"].value[0],v,\", \"+v,\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:identifier",
    "expression": "grel:if(value.startsWith(\"urn\"),\"http://nbn-resolving.de/\" + value,value)",
    "onError": "set-to-blank",
    "newColumnName": "url",
    "columnInsertIndex": 5,
    "description": "Create column url at index 5 based on column dc:identifier using expression grel:if(value.startsWith(\"urn\"),\"http://nbn-resolving.de/\" + value,value)"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:description",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "abstract",
    "columnInsertIndex": 8,
    "description": "Create column abstract at index 8 based on column dc:description using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:language",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "language",
    "columnInsertIndex": 14,
    "description": "Create column language at index 14 based on column dc:language using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "publisher",
    "expression": "grel:\"\"",
    "onError": "set-to-blank",
    "newColumnName": "geoLocationPoint",
    "columnInsertIndex": 6,
    "description": "Create column geoLocationPoint at index 6 based on column publisher using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:title",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "title",
    "columnInsertIndex": 8,
    "description": "Create column title at index 8 based on column dc:title using expression grel:value"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "title",
    "expression": "grel:if(row.record.fromRowIndex==row.index,row.record.cells[columnName].value.join(\"␟\"),null)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column title using expression grel:if(row.record.fromRowIndex==row.index,row.record.cells[columnName].value.join(\"␟\"),null)"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "title",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "␟",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column title by separator"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "title 1",
    "newColumnName": "title",
    "description": "Rename column title 1 to title"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "title 2",
    "newColumnName": "translatedTitle",
    "description": "Rename column title 2 to translatedTitle"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:language",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "titleLang",
    "columnInsertIndex": 18,
    "description": "Create column titleLang at index 18 based on column dc:language using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:format",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "format",
    "columnInsertIndex": 21,
    "description": "Create column format at index 21 based on column dc:format using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:type",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "resourceType",
    "columnInsertIndex": 16,
    "description": "Create column resourceType at index 16 based on column dc:type using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "resourceType",
    "expression": "grel:if(isNotNull(value),\"Text\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "resourceTypeGeneral",
    "columnInsertIndex": 17,
    "description": "Create column resourceTypeGeneral at index 17 based on column resourceType using expression grel:if(isNotNull(value),\"Text\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:subject",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "subject",
    "columnInsertIndex": 2,
    "description": "Create column subject at index 2 based on column dc:subject using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:identifier",
    "expression": "grel:if(value.startsWith(\"urn\"),value,\"\")",
    "onError": "set-to-blank",
    "newColumnName": "identifier",
    "columnInsertIndex": 4,
    "description": "Create column identifier at index 4 based on column dc:identifier using expression grel:if(value.startsWith(\"urn\"),value,\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "identifier",
    "expression": "grel:if(value.startsWith(\"urn\"),\"URN\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "identifierType",
    "columnInsertIndex": 5,
    "description": "Create column identifierType at index 5 based on column identifier using expression grel:if(value.startsWith(\"urn\"),\"URN\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:creator",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "creatorName",
    "columnInsertIndex": 17,
    "description": "Create column creatorName at index 17 based on column dc:creator using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:date",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "publicationYear",
    "columnInsertIndex": 19,
    "description": "Create column publicationYear at index 19 based on column dc:date using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "Record - header - datestamp",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "date",
    "columnInsertIndex": 33,
    "description": "Create column date at index 33 based on column Record - header - datestamp using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "Record - header - datestamp",
    "expression": "grel:if(isNotNull(value),\"Issued\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "dateType",
    "columnInsertIndex": 33,
    "description": "Create column dateType at index 33 based on column Record - header - datestamp using expression grel:if(isNotNull(value),\"Issued\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:source",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "seriesInformation",
    "columnInsertIndex": 20,
    "description": "Create column seriesInformation at index 20 based on column dc:source using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:rights",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "rightsURI",
    "columnInsertIndex": 17,
    "description": "Create column rightsURI at index 17 based on column dc:rights using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "id",
          "expression": "isBlank(value)",
          "columnName": "id",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": false,
                "l": "false"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "dc:rights",
    "expression": "grel:\"Open Access\"",
    "onError": "set-to-blank",
    "newColumnName": "rightsOA",
    "columnInsertIndex": 19,
    "description": "Create column rightsOA at index 19 based on column dc:rights using expression grel:\"Open Access\""
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "dc:rights",
    "expression": "grel:if(isNotNull(value),\"individuelle Lizenz\",\"\")",
    "onError": "set-to-blank",
    "newColumnName": "rights",
    "columnInsertIndex": 17,
    "description": "Create column rights at index 17 based on column dc:rights using expression grel:if(isNotNull(value),\"individuelle Lizenz\",\"\")"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "id",
          "expression": "isBlank(value)",
          "columnName": "id",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": false,
                "l": "false"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "id",
    "expression": "grel:\"UHH\"",
    "onError": "set-to-blank",
    "newColumnName": "internal_collectionId",
    "columnInsertIndex": 1,
    "description": "Create column internal_collectionId at index 1 based on column id using expression grel:\"UHH\""
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "id",
          "expression": "isBlank(value)",
          "columnName": "id",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": false,
                "l": "false"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "id",
    "expression": "grel:\"ediss\"",
    "onError": "set-to-blank",
    "newColumnName": "internal_collectionDetails",
    "columnInsertIndex": 1,
    "description": "Create column internal_collectionDetails at index 1 based on column id using expression grel:\"ediss\""
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "dc:title",
    "newColumnName": "internal_keywords",
    "description": "Rename column dc:title to internal_keywords"
  },
    {
    "op": "core/multivalued-cell-split",
    "columnName": "internal_keywords",
    "keyColumnName": "id",
    "mode": "separator",
    "separator": " ",
    "regex": false,
    "description": "Split multi-valued cells in column internal_keywords"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "publisher",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "internal_mapPoint",
    "columnInsertIndex": 6,
    "description": "Create column internal_mapPoint at index 6 based on column publisher using expression grel:value"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "subject_ddc",
    "expression": "jython:return value",
    "onError": "set-to-blank",
    "newColumnName": "internal_ddcComplete_facet",
    "columnInsertIndex": 9,
    "description": "Create column internal_ddcComplete_facet at index 9 based on column subject_ddc using expression jython:return value"
  }
]
